{
	"info": {
		"_postman_id": "8be76ddd-686f-4d23-b409-0809a5773deb",
		"name": "Monitor Run to Slack #integration #ops",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "22416010",
		"_collection_link": "https://postman-labs.postman.co/workspace/ec369488-f238-468b-904e-dac5c2d17bf4/collection/10845282-8be76ddd-686f-4d23-b409-0809a5773deb?action=share&source=collection_link&creator=22416010"
	},
	"item": [
		{
			"name": "Fetch Job Details",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"startTime\", Date.now());",
							"",
							"eval(pm.globals.get('pmIntegrationLib'));",
							"pm.integration.start();",
							"",
							"try {",
							"",
							"    var hookData = JSON.parse(globals.previousRequest).data,",
							"        variables, integrationRun, integrationRunId, accessToken, jobId, user, baseUrl",
							"        template = \"Monitor [{{name}}]({{url}}) on Collection {{collection_name}} did not run successfully. {{requestCount}} requests ran and {{failedTests}} tests failed\";",
							"",
							"    // Checking if the old event payload or the new payload",
							"    if(_.get(hookData,'response')) {",
							"        var response = _.get(hookData,'response'),",
							"            message = _.get(response, 'meta.notification.message'),",
							"            messageVariables = message.variables;",
							"        variables = _.get(hookData,'variables');",
							"        integrationRun = _.get(hookData,'integrationRun');",
							"        integrationRunId = _.get(integrationRun,'id');",
							"        accessToken = _.get(integrationRun,'accessToken'); ",
							"        jobId = _.get(messageVariables,'job.id');  ",
							"        user = _.get(response,'meta.user');",
							"        baseUrl = _.get(integrationRun, 'baseUrl');",
							"",
							"    }",
							"    else {",
							"        variables = _.get(hookData,'integration.variables'),",
							"        integrationRun = _.get(hookData,'integrationRun'),",
							"        integrationRunId = _.get(integrationRun,'id'),",
							"        accessToken = _.get(integrationRun,'accessToken'),",
							"        jobId = _.get(hookData,'event.additionalContext.run.id');",
							"        user = _.get(hookData, 'actor.type') === 'user' && _.get(hookData, 'actor.userId');",
							"        baseUrl = _.get(integrationRun, 'baseUrl');",
							"    }",
							"",
							"    // assigning all the extracted value to global variables",
							"    pm.globals.set(\"variables\", variables);",
							"    pm.globals.set(\"integrationRun\", integrationRun);",
							"    pm.globals.set(\"integrationRunId\", integrationRunId);",
							"    pm.globals.set(\"access_token\", accessToken);",
							"    pm.globals.set(\"jobId\", jobId);",
							"    pm.globals.set(\"user\", user);",
							"    pm.globals.set(\"template\", template);",
							"    pm.globals.set('baseUrl', baseUrl);",
							"    pm.globals.set('integrationInstanceId', _.get(hookData, 'integration.id'));",
							"}",
							"catch (e) {",
							"    // Expected to come here only if some code fails (could be due to missing context.",
							"    ",
							"    pm.integration.fail('Unknown error encountered during integration execution.', {",
							"        error: {",
							"            name: 'unknownError',",
							"            stepsToFix: 'Please contact [Postman support](mailto:help@postman.com) along with the traceId if this error is seen repeatedly.'",
							"        }",
							"    });",
							"    ",
							"    postman.setEnvironmentVariable(\"status\", \"failure\");",
							"    postman.setEnvironmentVariable(\"errorObject\", JSON.stringify({",
							"        request: pm.info.requestName,",
							"        message: ''+e",
							"    }));",
							"    var logObject = {",
							"        integrationRunId: _.get(pm.globals.get('integrationRun'), 'id', 'Not Found'),",
							"        integrationType: pm.variables.get('integration_rule'),",
							"        status: pm.environment.get('status'),",
							"        totalTime: Date.now() - pm.environment.get('startTime'),",
							"        error: JSON.parse(pm.environment.get('errorObject') || '{}'),",
							"        integrationId: pm.globals.get('integrationInstanceId')",
							"    },",
							"    licenseKey = pm.variables.get('2520660a-b700-11eb-8529-0242ac130003');",
							"",
							"    pm.integration.log(logObject, licenseKey);",
							"    ",
							"    postman.setNextRequest(null);",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"eval(pm.globals.get('pmIntegrationLib'));",
							"",
							"if (pm.environment.get(\"status\") !== 'failure') {",
							"    let responseData = JSON.parse(responseBody);",
							"",
							"    try {",
							"        if (pm.response.code !== 200) {",
							"            pm.integration.fail('Something went wrong while running the integration.', {",
							"                error: {",
							"                    name: 'unknownError',",
							"                    stepsToFix: 'Please contact [Postman support](mailto:help@postman.com) if this error is seen repeatedly.'",
							"                }",
							"            });",
							"",
							"            postman.setEnvironmentVariable(\"status\", \"failure\");",
							"            postman.setEnvironmentVariable(\"errorObject\", JSON.stringify({",
							"                request: pm.info.requestName,",
							"                response: {",
							"                    code: responseCode.code,",
							"                    body: responseBody",
							"                },",
							"                message: 'Something went wrong with the proxy API'",
							"            }));",
							"",
							"            var logObject = {",
							"                integrationRunId: _.get(pm.globals.get('integrationRun'), 'id', 'Not Found'),",
							"                integrationType: pm.variables.get('integration_rule'),",
							"                status: pm.environment.get('status'),",
							"                totalTime: Date.now() - pm.environment.get('startTime'),",
							"                error: JSON.parse(pm.environment.get('errorObject') || '{}'),",
							"                integrationId: pm.globals.get('integrationInstanceId')",
							"            },",
							"            licenseKey = pm.variables.get('2520660a-b700-11eb-8529-0242ac130003');",
							"",
							"            pm.integration.log(logObject, licenseKey);",
							"            ",
							"            postman.setNextRequest(null);",
							"        } ",
							"        else {",
							"            let job = _.get(responseData,'job'),",
							"                collectionId = _.get(job,'collection'),",
							"                environmentId = _.get(job,'environment'),",
							"                userId = _.get(job, 'createdBy'),",
							"                jobTemplate = {",
							"                    id: _.get(job, 'jobTemplate'),",
							"                    name: _.get(job, 'name')",
							"                },",
							"                user = {id:userId,name:\"Postman User\"},",
							"                collection = {id:collectionId, name: \"Postman Collection\"},",
							"                environment = {id:environmentId, name: \"Postman Environment\"},",
							"                url = `${pm.variables.get('monitor_base_url')}/${jobTemplate.id}?job=${job.id}`,",
							"                messages = {",
							"                    success: 'Monitor [{{name}}]({{url}}) on Collection {{collection_name}} with {{requestCount}} ' +",
							"                    'requests and {{passedTests}} tests ran successfully',",
							"                    failure: 'Monitor [{{name}}]({{url}}) on Collection {{collection_name}} did not run successfully. ' +",
							"                    '{{requestCount}} requests ran and {{failedTests}} tests failed',",
							"                    abort: 'Monitor [{{name}}]({{url}}) on Collection {{collection_name}} was aborted',",
							"                    error: 'Monitor [{{name}}]({{url}}) on Collection {{collection_name}} failed with {{errors}} errors'",
							"                },",
							"                template = (_.get(job,'status.healthy') && messages.success) || (_.get(job,'status.aborted') && messages.abort) || ((_.get(job,'results.errors') || (_.get(job,'results.errorCount')))&& messages.error) || messages.failure;",
							"                job['url'] = url;",
							"",
							"            // setting the fetched data as global variables",
							"            pm.globals.set('job', job);",
							"            pm.globals.set('collectionId', collectionId);",
							"            pm.globals.set('environmentId', environmentId);",
							"            pm.globals.set('userId', userId);",
							"            pm.globals.set('jobTemplate', jobTemplate);",
							"            pm.globals.set('user', user);",
							"            pm.globals.set('template',template);",
							"            collectionId && pm.globals.set('collection', collection);",
							"            environmentId && pm.globals.set('environment', environment);",
							"        }",
							"    }",
							"    catch (e) {",
							"",
							"        // Expected to come here if some code fails",
							"        pm.integration.fail('Unknown error encountered during integration execution.', {",
							"            error: {",
							"                name: 'unknownError',",
							"                stepsToFix: 'Please contact [Postman support](mailto:help@postman.com) if this error is seen repeatedly.'",
							"            }",
							"        });",
							"",
							"        postman.setEnvironmentVariable(\"status\", \"failure\");",
							"        postman.setEnvironmentVariable(\"errorObject\", JSON.stringify({",
							"            request: pm.info.requestName,",
							"            response: {",
							"                code: responseCode.code,",
							"                body: responseBody",
							"            },",
							"            message: '' + e",
							"        }));",
							"",
							"        var logObject = {",
							"            integrationRunId: _.get(pm.globals.get('integrationRun'), 'id', 'Not Found'),",
							"            integrationType: pm.variables.get('integration_rule'),",
							"            status: pm.environment.get('status'),",
							"            totalTime: Date.now() - pm.environment.get('startTime'),",
							"            error: JSON.parse(pm.environment.get('errorObject') || '{}'),",
							"            integrationId: pm.globals.get('integrationInstanceId')",
							"        },",
							"        licenseKey = pm.variables.get('2520660a-b700-11eb-8529-0242ac130003');",
							"",
							"        pm.integration.log(logObject, licenseKey);",
							"        ",
							"        postman.setNextRequest(null);",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/integration-runs/:runId/proxy/monitoring/jobs/:jobId?access_token={{access_token}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"integration-runs",
						":runId",
						"proxy",
						"monitoring",
						"jobs",
						":jobId"
					],
					"query": [
						{
							"key": "access_token",
							"value": "{{access_token}}"
						}
					],
					"variable": [
						{
							"key": "runId",
							"value": "{{integrationRunId}}",
							"type": "string"
						},
						{
							"key": "jobId",
							"value": "{{jobId}}",
							"type": "string"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Fetch Collection Details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"eval(pm.globals.get('pmIntegrationLib'));",
							"// If pre-request script has not failed already",
							"",
							"if (pm.environment.get(\"status\") !== 'failure') {",
							"    try {    ",
							"        if (pm.response.code === 200 && !_.isEmpty(JSON.parse(responseBody))) {",
							"            let responseData = JSON.parse(responseBody);",
							"            pm.globals.set('collection', responseData);",
							"        }",
							"        if(_.isUndefined(globals.environmentId) || globals.environmentId === null) {",
							"            postman.setNextRequest(\"Fetch User Details\");",
							"        }",
							"    }",
							"    catch (e) {",
							"        // Expected to come here if some code fails",
							"        postman.setEnvironmentVariable(\"errorObject\", JSON.stringify({",
							"            request: pm.info.requestName,",
							"            response: {",
							"                code: responseCode.code,",
							"                body: responseBody",
							"            },",
							"            message: ''+e",
							"        }));",
							"        ",
							"        var logObject = {",
							"            integrationRunId: _.get(pm.globals.get('integrationRun'), 'id', 'Not Found'),",
							"            integrationType: pm.variables.get('integration_rule'),",
							"            status: pm.environment.get('status'),",
							"            totalTime: Date.now() - pm.environment.get('startTime'),",
							"            error: JSON.parse(pm.environment.get('errorObject') || '{}'),",
							"            integrationId: pm.globals.get('integrationInstanceId')",
							"        },",
							"        licenseKey = pm.variables.get('2520660a-b700-11eb-8529-0242ac130003');",
							"",
							"        pm.integration.log(logObject, licenseKey);",
							"        ",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/integration-runs/:runId/proxy/collection/:collectionId/meta?access_token={{access_token}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"integration-runs",
						":runId",
						"proxy",
						"collection",
						":collectionId",
						"meta"
					],
					"query": [
						{
							"key": "access_token",
							"value": "{{access_token}}"
						}
					],
					"variable": [
						{
							"key": "runId",
							"value": "{{integrationRunId}}",
							"type": "string"
						},
						{
							"key": "collectionId",
							"value": "{{collectionId}}",
							"type": "string"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Fetch Environment Details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"eval(pm.globals.get('pmIntegrationLib'));",
							"// If pre-request script has not failed already",
							"",
							"if (pm.environment.get(\"status\") !== 'failure') {",
							"    let responseData = JSON.parse(responseBody);",
							"    try {    ",
							"        if (pm.response.code === 200 && !_.isEmpty(JSON.parse(responseBody))) {",
							"             let responseData = JSON.parse(responseBody);",
							"            // setting global environment object",
							"            pm.globals.set('environment', responseData);",
							"        }",
							"    }",
							"    catch (e) {",
							"        // Expected to come here if some code fails",
							"        postman.setEnvironmentVariable(\"errorObject\", JSON.stringify({",
							"            request: pm.info.requestName,",
							"            response: {",
							"                code: responseCode.code,",
							"                body: responseBody",
							"            },",
							"            message: ''+e",
							"        }));",
							"        ",
							"        var logObject = {",
							"            integrationRunId: _.get(pm.globals.get('integrationRun'), 'id', 'Not Found'),",
							"            integrationType: pm.variables.get('integration_rule'),",
							"            status: pm.environment.get('status'),",
							"            totalTime: Date.now() - pm.environment.get('startTime'),",
							"            error: JSON.parse(pm.environment.get('errorObject') || '{}'),",
							"            integrationId: pm.globals.get('integrationInstanceId')",
							"        },",
							"        licenseKey = pm.variables.get('2520660a-b700-11eb-8529-0242ac130003');",
							"",
							"        pm.integration.log(logObject, licenseKey);",
							"        ",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/integration-runs/:runId/proxy/environment/:environmentId?access_token={{access_token}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"integration-runs",
						":runId",
						"proxy",
						"environment",
						":environmentId"
					],
					"query": [
						{
							"key": "access_token",
							"value": "{{access_token}}"
						}
					],
					"variable": [
						{
							"key": "runId",
							"value": "{{integrationRunId}}",
							"type": "string"
						},
						{
							"key": "environmentId",
							"value": "{{environmentId}}",
							"type": "string"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Fetch User Details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"eval(pm.globals.get('pmIntegrationLib'));",
							"// If pre-request script has not failed already",
							"",
							"if (pm.environment.get(\"status\") !== 'failure') {",
							"    let responseData = JSON.parse(responseBody);",
							"    try {    ",
							"        if (pm.response.code === 200 && !_.isEmpty(responseData)) {",
							"             // setting global user object",
							"            pm.globals.set('user', responseData);",
							"        }",
							"    }",
							"    catch (e) {",
							"        // Expected to come here if some code fails",
							"        postman.setEnvironmentVariable(\"errorObject\", JSON.stringify({",
							"            request: pm.info.requestName,",
							"            response: {",
							"                code: responseCode.code,",
							"                body: responseBody",
							"            },",
							"            message: ''+e",
							"        }));",
							"        ",
							"        var logObject = {",
							"            integrationRunId: _.get(pm.globals.get('integrationRun'), 'id', 'Not Found'),",
							"            integrationType: pm.variables.get('integration_rule'),",
							"            status: pm.environment.get('status'),",
							"            totalTime: Date.now() - pm.environment.get('startTime'),",
							"            error: JSON.parse(pm.environment.get('errorObject') || '{}'),",
							"            integrationId: pm.globals.get('integrationInstanceId')",
							"        },",
							"        licenseKey = pm.variables.get('2520660a-b700-11eb-8529-0242ac130003');",
							"",
							"        pm.integration.log(logObject, licenseKey);",
							"        ",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/integration-runs/:runId/proxy/users/:userId?access_token={{access_token}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"integration-runs",
						":runId",
						"proxy",
						"users",
						":userId"
					],
					"query": [
						{
							"key": "access_token",
							"value": "{{access_token}}"
						}
					],
					"variable": [
						{
							"key": "runId",
							"value": "{{integrationRunId}}",
							"type": "string"
						},
						{
							"key": "userId",
							"value": "{{userId}}",
							"type": "string"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Fetch Run Log Details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"eval(pm.globals.get('pmIntegrationLib'));",
							"",
							"if (pm.environment.get(\"status\") !== 'failure') {",
							"    let responseData = JSON.parse(responseBody);",
							"",
							"    try {",
							"        if (pm.response.code !== 200) {",
							"            pm.integration.fail('Something went wrong while running the integration.', {",
							"                error: {",
							"                    name: 'unknownError',",
							"                    stepsToFix: 'Please contact [Postman support](mailto:help@postman.com) if this error is seen repeatedly.'",
							"                }",
							"            });",
							"",
							"            postman.setEnvironmentVariable(\"status\", \"failure\");",
							"            postman.setEnvironmentVariable(\"errorObject\", JSON.stringify({",
							"                request: pm.info.requestName,",
							"                response: {",
							"                    code: responseCode.code,",
							"                    body: responseBody",
							"                },",
							"                message: 'Something went wrong with the proxy API'",
							"            }));",
							"",
							"            var logObject = {",
							"                integrationRunId: _.get(pm.globals.get('integrationRun'), 'id', 'Not Found'),",
							"                integrationType: pm.variables.get('integration_rule'),",
							"                status: pm.environment.get('status'),",
							"                totalTime: Date.now() - pm.environment.get('startTime'),",
							"                error: JSON.parse(pm.environment.get('errorObject') || '{}'),",
							"                integrationId: pm.globals.get('integrationInstanceId')",
							"            },",
							"            licenseKey = pm.variables.get('2520660a-b700-11eb-8529-0242ac130003');",
							"",
							"            pm.integration.log(logObject, licenseKey);",
							"            ",
							"            postman.setNextRequest(null);",
							"        } ",
							"        else {",
							"            postman.setGlobalVariable('runLog', JSON.stringify(responseData));",
							"            let data = responseData.data,",
							"                requestsData = [];",
							"",
							"            _.each(data, (regionData) => {",
							"                let httpReqIdToReqId = {},",
							"                reqIdToReqData= {},",
							"                regionEntry = {",
							"                        region: _.get(regionData,'region') || _.get(regionData,'agent'),",
							"                        requests: []",
							"                    };",
							"                ",
							"                _.each(_.get(regionData,'log'), logItem => {",
							"                    //  request event filtered",
							"                    if (logItem.event == \"request\") {",
							"                        let httpReqId = _.get(logItem, 'args.cursor.httpRequestId'),",
							"                            reqId = _.get(logItem, 'args.item.id');",
							"                            reqData = {",
							"                                id: _.get(logItem, 'args.item.id'),",
							"                                name: _.get(logItem, 'args.item.name'),",
							"                                url: _.get(logItem, 'args.item.request.url'),",
							"                                method: _.get(logItem, 'args.item.request.method'),",
							"                                tests: []",
							"                            }",
							"",
							"                        // mapping the httpReqId to reqId",
							"                        httpReqIdToReqId[httpReqId] = reqId;",
							"",
							"                        // mapping reqId with the data",
							"                        reqIdToReqData[reqId] = reqData;",
							"                    }",
							"                    else if (logItem.event == \"assertion\") {",
							"                        let httpReqId = _.get(logItem, 'args.cursor.httpRequestId');",
							"      ",
							"                        // accessing tests/asserion and pushing it to the test array of respective request",
							"                        _.each(_.get(logItem, \"args.assertion\"), assertion => {",
							"                            if(!assertion.passed) {",
							"                                reqIdToReqData[httpReqIdToReqId[httpReqId]].tests.push(assertion);",
							"                            } ",
							"                        });",
							"                    } ",
							"                });",
							"                regionEntry.requests = Object.values(reqIdToReqData);",
							"                requestsData.push(regionEntry);",
							"            });",
							"",
							"            pm.globals.set('requests', requestsData);",
							"        }",
							"    }",
							"    catch (e) {",
							"",
							"        // Expected to come here if some code fails",
							"        postman.setEnvironmentVariable(\"errorObject\", JSON.stringify({",
							"            request: pm.info.requestName,",
							"            response: {",
							"                code: responseCode.code,",
							"                body: responseBody",
							"            },",
							"            message: '' + e",
							"        }));",
							"",
							"        var logObject = {",
							"            integrationRunId: _.get(pm.globals.get('integrationRun'), 'id', 'Not Found'),",
							"            integrationType: pm.variables.get('integration_rule'),",
							"            status: pm.environment.get('status'),",
							"            totalTime: Date.now() - pm.environment.get('startTime'),",
							"            error: JSON.parse(pm.environment.get('errorObject') || '{}'),",
							"            integrationId: pm.globals.get('integrationInstanceId')",
							"        },",
							"        licenseKey = pm.variables.get('2520660a-b700-11eb-8529-0242ac130003');",
							"",
							"        pm.integration.log(logObject, licenseKey);",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/integration-runs/:runId/proxy/monitoring/jobs/:jobId/runLog?access_token={{access_token}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"integration-runs",
						":runId",
						"proxy",
						"monitoring",
						"jobs",
						":jobId",
						"runLog"
					],
					"query": [
						{
							"key": "access_token",
							"value": "{{access_token}}"
						}
					],
					"variable": [
						{
							"key": "runId",
							"value": "{{integrationRunId}}",
							"type": "string"
						},
						{
							"key": "jobId",
							"value": "{{jobId}}",
							"type": "string"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Post to Slack",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"eval(pm.globals.get('pmIntegrationLib'));",
							"",
							"function failAndLog(msg, extraData, errorFromSlack) {",
							"    pm.integration.fail(msg, extraData);",
							"    ",
							"    var logObject = {",
							"        integrationRunId: _.get(pm.globals.get('integrationRun'), 'id', 'Not Found'),",
							"        integrationType: pm.variables.get('integration_rule'),",
							"        status: pm.environment.get('status'),",
							"        totalTime: Date.now() - pm.environment.get('startTime'),",
							"        error: {",
							"            request: pm.info.requestName,",
							"            response: {",
							"                code: pm.response.code,",
							"                body: errorFromSlack",
							"            },",
							"            message: _.get(extraData, 'error.name')",
							"        },",
							"        integrationId: pm.globals.get('integrationInstanceId')",
							"    },",
							"    licenseKey = pm.variables.get('2520660a-b700-11eb-8529-0242ac130003');",
							"",
							"    pm.integration.log(logObject, licenseKey);",
							"}",
							"",
							"const licenseKey = pm.variables.get('2520660a-b700-11eb-8529-0242ac130003');",
							"",
							"// Ignore the actual response code if this was a bail-out request",
							"if (pm.variables.get(\"url\") === \"https://postman-echo.com/post\") {",
							"    pm.integration.success(`The monitor results were not posted to the Slack channel due to user preferences`);",
							"    postman.setEnvironmentVariable(\"status\", \"success\");",
							"}",
							"else {",
							"    // If pre-request script has not failed already",
							"    if (pm.environment.get(\"status\") !== 'failure') {",
							"        try {",
							"            if (globals.failures === \"true\") {",
							"                tests[\"Only failures are configured\"] = true;",
							"            }",
							"            else {",
							"                tests[\"Status code is 200\"] = responseCode.code === 200;",
							"            }",
							"            let user = pm.globals.get('user');",
							"            ",
							"            postman.setEnvironmentVariable(\"userId\", user.id);",
							"            postman.setEnvironmentVariable(\"username\", user.username);",
							"",
							"",
							"            // Decode error messages of slack v1 APIs",
							"            if (pm.variables.get('url') !== 'https://slack.com/api/chat.postMessage' ) {",
							"                if (responseCode.code !== 200) {",
							"                    console.log(`Response Code: ${pm.response.code}, Body: ${pm.response.text()}`);",
							"                    ",
							"                    let msg, extraData;",
							"                    ",
							"                ",
							"                    if (pm.response.code === 404) {",
							"                        if (pm.response.text() === 'channel_not_found') {",
							"                            msg = `The Slack channel${globals.channel ? ' ' + globals.channel : ''} was not found.`;",
							"                            extraData = {",
							"                                error: {",
							"                                    name: 'slackChannelNotFoundError',",
							"                                    stepsToFix: [",
							"                                        `Please add the channel${globals.channel ? ' ' + globals.channel : ''} in your Slack workspace`,",
							"                                        'If you are unable to add the channel, delete and [recreate this integration](https://learning.postman.com/docs/integrations/slack/).'",
							"                                    ]",
							"                                }",
							"                            };",
							"                        }",
							"                        else {",
							"                            msg = 'Slack did not recognize the configured webhook!';",
							"                            extraData = {",
							"                                error: {",
							"                                    name: 'slackInvalidWebhookError',",
							"                                    stepsToFix: 'Please delete and [recreate this integration](https://learning.postman.com/docs/integrations/slack/) with a valid webhook.'",
							"                                }",
							"                            };",
							"                        }",
							"                    }",
							"                    else if (pm.response.code === 403) {",
							"                        msg = 'The message could not be posted to the Slack channel.';",
							"                        extraData = {",
							"                            error: {",
							"                                name: 'slackForbiddenError',",
							"                                stepsToFix: `Please ensure write permissions are enabled for the ${globals.channel ? '\"' + globals.channel + '\"' : 'configued'} channel by contacting your admin.`",
							"                            }",
							"                        };",
							"                    }",
							"                    else if (pm.response.code === 410) {",
							"                        msg = `The Slack channel ${globals.channel ? ' ' + globals.channel : ''} was archived.`;",
							"                        extraData = {",
							"                            details: 'Messages cannot be sent to archived Slack channels.',",
							"                            error: {",
							"                                name: 'slackArchivedError',",
							"                                stepsToFix: [",
							"                                    `Please unarchive the channel${globals.channel ? ' ' + globals.channel : ''} in your Slack workspace`,",
							"                                    `If you are unable to unarchive the channel, delete and [recreate this integration](https://learning.postman.com/docs/integrations/slack/) with a different channel.`",
							"                                ]",
							"                            }",
							"                        };",
							"                    }",
							"                    else if (pm.response.code === 500) {",
							"                        msg = `Slack threw an unknown error.`;",
							"                        extraData = {",
							"                            details: 'This should be a temporary issue on Slack\\'s end.',",
							"                            error: {",
							"                                name: 'slackUnknown500Error',",
							"                                stepsToFix: `Please contact [Postman support](mailto:help@postman.com) if this error is seen repeatedly.`",
							"                            }",
							"                        };",
							"                    }",
							"                    else {",
							"                        thrw 'unhandled error';",
							"                    }",
							"                   failAdLo(mg, exraDta pm.response.text());",
							"                }",
							"                else {",
							"                    pm.inegatsuccess(`The montor results were posted to the Slack channel ${globals.channel ? globals.channel : ''}`);",
							"                    postman.setEnvironmentVariable(\"status\", \"success\");",
							"                }",
							"            }",
							"            // decode errr messages of slack V2 APIs",
							"            else {",
							"                let responseData = JSON.parse(responseBody);",
							"                if (!_.isEmpty(responseData)) {",
							"                    if (pm.response.code === 200 && responseData.ok) {",
							"                        pm.integration.success(`The monitor results were posted to the Slack channel ${globals.channel ? globals.channel : ''}`);",
							"                        postman.setEnvironmentVariable(\"status\", \"success\");",
							"                    }",
							"                    else if (!responseData.ok) {",
							"                        console.log('Error at slack', responseData.error);",
							"                        switch(responseData.error) {",
							"                            case 'channel_not_found':",
							"                            case 'duplicate_channel_not_found':",
							"                                failAndLog(",
							"                                    `The Slack channel${globals.channel ? ' ' + globals.channel : ''} was not found.`,",
							"                                    {",
							"                                        error: {",
							"                                        name: 'slackChannelNotFoundError',",
							"                                            stepsToFix: [",
							"                                                `Invite the postman app to this channel, if this is a private channel; OR`,",
							"                                                `Please select a different channel for this integration by [editing it.](${pm.collectionVariables.get('postmanUrl')}/integrations/${globals.integrationInstanceId})`",
							"                                            ]",
							"                                        }",
							"                                    },",
							"                                    responseData.error",
							"                                );",
							"                                break;",
							"                            case 'not_in_channel':",
							"                                failAndLog(",
							"                                    `Not able to post to the channel ${globals.channel} as the bot is not invited to it.`,",
							"                                    {",
							"                                        error: {",
							"                                            name: 'userNotInSlackChannel',",
							"                                            stepsToFix: [",
							"                                            `Invite the Postman bot to the channel by typing @Postman. OR`,",
							"                                            `Select a different channel for this integration by [editing it.](${pm.collectionVariables.get('postmanUrl')}/integrations/${globals.integrationInstanceId})`",
							"                                            ]",
							"                                        }",
							"                                    },",
							"                                    responseData.error",
							"                                );",
							"                                break;",
							"                            case 'is_archived':",
							"                                failAndLog(",
							"                                    `The channel ${globals.channel} has been archived.`,",
							"                                    {",
							"                                        error: {",
							"                                            name: 'slackChannelArchived',",
							"                                            stepsToFix: [",
							"                                            `Request the owner of the slack channel to unarchive it. OR`,",
							"                                            `Select a different channel for this integration by [editing it.](${pm.collectionVariables.get('postmanUrl')}/integrations/${globals.integrationInstanceId})`",
							"                                            ]",
							"                                        }",
							"                                    },",
							"                                    responseData.error",
							"                                );",
							"                                break;",
							"                            case 'restricted_action':",
							"                                failAndLog(",
							"                                    `The preferences on your Slack channel ${globals.channel} don\\'t allow the bot to post message.`,",
							"                                    {",
							"                                        error: {",
							"                                            name: 'slackChannelRestrictedByUserPreferences',",
							"                                            stepsToFix: [",
							"                                            `Edit the permissions to allow @Postman to send a message. OR`,",
							"                                            `Select a different channel for this integration by [editing it.](${pm.collectionVariables.get('postmanUrl')}/integrations/${globals.integrationInstanceId})`",
							"                                            ]",
							"                                        }",
							"                                    },",
							"                                    responseData.error",
							"                                );",
							"                                break;",
							"                            case 'restricted_action_read_only_channel':",
							"                                failAndLog(",
							"                                    `Cannot post to a read-only Slack Channel.`,",
							"                                    {",
							"                                        error: {",
							"                                            name: 'slackChannelReadOnly',",
							"                                            stepsToFix: [",
							"                                            `Request the owner of this Slack channel to modify permissions. OR`,",
							"                                            `Select a different channel for this integration by [editing it.](${pm.collectionVariables.get('postmanUrl')}/integrations/${globals.integrationInstanceId})`",
							"                                            ]",
							"                                        }",
							"                                    },",
							"                                    responseData.error",
							"                                );",
							"                                break;",
							"                            case 'restricted_action_thread_only_channel':",
							"                            case 'restricted_action_non_threadable_channel':",
							"                            case 'restricted_action_thread_locked':",
							"                                failAndLog(",
							"                                    `Cannot post to a restricted Slack Channel.`,",
							"                                    {",
							"                                        error: {",
							"                                            name: 'slackChannelNotAllowed',",
							"                                            stepsToFix: [",
							"                                            `Select a different channel for this integration by [editing it.](${pm.collectionVariables.get('postmanUrl')}/integrations/${globals.integrationInstanceId})`",
							"                                            ]",
							"                                        }",
							"                                    },",
							"                                    responseData.error",
							"                                );",
							"                                break;",
							"                            case 'ekm_access_denied':",
							"                                failAndLog(",
							"                                    `Your Slack Workspace settings do not allow to post a message(ekm_access_denied).`,",
							"                                    {",
							"                                        error: {",
							"                                            name: 'slackNotAllowedByWorkspacePreferences',",
							"                                            stepsToFix: [",
							"                                            `Reach out to the admin of your slack workspace for support.`",
							"                                            ]",
							"                                        }",
							"                                    },",
							"                                    responseData.error",
							"                                );",
							"                                break;",
							"                            case 'enterprise_is_restricted':",
							"                                failAndLog(",
							"                                    `Your slack Enterprise Workspace doesn\\'t allow posting messages using this integration.`,",
							"                                    {",
							"                                        error: {",
							"                                            name: 'slackNotAllowedByWorkspacePreferences',",
							"                                            stepsToFix: [",
							"                                            `Reach out to the admin of your slack workspace for support. OR`",
							"                                            ]",
							"                                        }",
							"                                    },",
							"                                    responseData.error",
							"                                );",
							"                                break;",
							"                            case 'rate_limited':",
							"                            case 'ratelimited':",
							"                                pm.integration.fail(",
							"                                    'Temporary Error at Slack: Too many operations performed in a short duration.',",
							"                                    {",
							"                                        details: 'You are being rate limited by Slack. This should be an intermittent issue.',",
							"                                        error: {",
							"                                            name: 'slackRateLimitReached',",
							"                                            stepsToFix: [",
							"                                            `This should be a temporary and infrequent issue`,",
							"                                            'Please contact [Postman support](mailto:help@postman.com) if this error is seen repeatedly.'",
							"                                            ]",
							"                                        }",
							"                                    }",
							"                                );",
							"                                var logObject = {",
							"                                    integrationRunId: _.get(pm.globals.get('integrationRun'), 'id', 'Not Found'),",
							"                                    integrationType: pm.variables.get('integration_rule'),",
							"                                    status: pm.environment.get('status'),",
							"                                    totalTime: Date.now() - pm.environment.get('startTime'),",
							"                                    error: {",
							"                                        name: responseData.error,",
							"                                        details: responseData",
							"                                    },",
							"                                    integrationId: pm.globals.get('integrationInstanceId')",
							"                                };        ",
							"                                pm.integration.log(logObject, licenseKey);",
							"                                break;",
							"                            case 'invalid_blocks':",
							"                            case 'invalid_blocks_format':",
							"                                pm.integration.fail('Unknown error encountered during integration execution.', {",
							"                                    error: {",
							"                                        name: 'slackBlockParsingFailed',",
							"                                        stepsToFix: 'Please contact [Postman support](mailto:help@postman.com) if this error is seen repeatedly.'",
							"                                    }",
							"                                });",
							"                                var logObject = {",
							"                                    integrationRunId: _.get(pm.globals.get('integrationRun'), 'id', 'Not Found'),",
							"                                    integrationType: pm.variables.get('integration_rule'),",
							"                                    status: pm.environment.get('status'),",
							"                                    totalTime: Date.now() - pm.environment.get('startTime'),",
							"                                    error: {",
							"                                        name: responseData.error,",
							"                                        details: responseData",
							"                                    },",
							"                                    integrationId: pm.globals.get('integrationInstanceId')",
							"                                };        ",
							"                                pm.integration.log(logObject, licenseKey);",
							"                                break;",
							"                            case 'team_access_not_granted':",
							"                            case 'not_authed':",
							"                            case 'invalid_auth':",
							"                            case 'missing_scope':",
							"                            case 'access_denied':",
							"                            case 'account_inactive':",
							"                            case 'token_revoked':",
							"                            case 'two_factor_setup_required':",
							"                            case 'not_allowed_token_type':",
							"                            case 'token_expired no_permission':",
							"                            case 'accesslimited':",
							"                                failAndLog('Access Denied: The credentials provided for this integration are no longer valid or may have expired.', {",
							"                                        error: {",
							"                                            name: 'slackAuthError',",
							"                                            stepsToFix: [",
							"                                                'Please delete this integration and create again.'",
							"                                            ]",
							"                                        }",
							"                                    },",
							"                                    responseData.error",
							"                                );",
							"                                break;",
							"                            case 'org_login_required':",
							"                            case 'team_added_to_org':",
							"                                failAndLog('Ongoing Enterprise migration on Slack.', {",
							"                                    details: 'Cannot post messages while Slack enterprise migration is in progress.',",
							"                                    error: {",
							"                                        name: 'slackOngoingEnterpriseMigration',",
							"                                        stepsToFix: [",
							"                                            'Please wait for the completion of Enterprise migration of your Slack Workspace; OR'",
							"                                        ]",
							"                                    }",
							"                                },",
							"                                responseData.error",
							"                                );",
							"                            case 'msg_too_long':",
							"                            case 'no_text':",
							"                            case 'invalid_metadata_format':",
							"                            case 'invalid_metadata_schema':",
							"                            case 'metadata_must_be_sent_from_app':",
							"                            case 'invalid_arguments':",
							"                            case 'invalid_arg_name':",
							"                            case 'invalid_array_arg':",
							"                            case 'invalid_charset':",
							"                            case 'invalid_form_data':",
							"                            case 'invalid_post_type':",
							"                            case 'missing_post_type':",
							"                                pm.integration.fail('Unknown error encountered during integration execution.', {",
							"                                    error: {",
							"                                        name: 'slackImplementationIncorrect',",
							"                                        stepsToFix: 'Please contact [Postman support](mailto:help@postman.com) if this error is seen repeatedly.'",
							"                                    }",
							"                                });",
							"                                var logObject = {",
							"                                    integrationRunId: _.get(pm.globals.get('integrationRun'), 'id', 'Not Found'),",
							"                                    integrationType: pm.variables.get('integration_rule'),",
							"                                    status: pm.environment.get('status'),",
							"                                    totalTime: Date.now() - pm.environment.get('startTime'),",
							"                                    error: {",
							"                                        name: responseData.error,",
							"                                        details: responseData",
							"                                    },",
							"                                    integrationId: pm.globals.get('integrationInstanceId')",
							"                                };        ",
							"                                pm.integration.log(logObject, licenseKey);",
							"                                break;",
							"",
							"                            case 'method_deprecated':",
							"                            case 'deprecated_endpoint':",
							"                                pm.integration.fail('Unknown error encountered during integration execution.', {",
							"                                    error: {",
							"                                        name: 'slackImplementationOutdated',",
							"                                        stepsToFix: 'Please contact [Postman support](mailto:help@postman.com) if this error is seen repeatedly.'",
							"                                    }",
							"                                });",
							"                                var logObject = {",
							"                                    integrationRunId: _.get(pm.globals.get('integrationRun'), 'id', 'Not Found'),",
							"                                    integrationType: pm.variables.get('integration_rule'),",
							"                                    status: pm.environment.get('status'),",
							"                                    totalTime: Date.now() - pm.environment.get('startTime'),",
							"                                    error: {",
							"                                        name: responseData.error,",
							"                                        details: responseData",
							"                                    },",
							"                                    integrationId: pm.globals.get('integrationInstanceId')",
							"                                };        ",
							"                                pm.integration.log(logObject, licenseKey);",
							"                                break;",
							"                            ",
							"                            case 'request_timeout':",
							"                            case 'service_unavailable':",
							"                                pm.integration.fail(",
							"                                    'Temporary Error at Slack: Slack was down or degraded.',",
							"                                    {",
							"                                        details: 'Slack\\'s servers are either down or are in a degraded state. This should be an intermittent issue.',",
							"                                        error: {",
							"                                            name: 'slack5XX',",
							"                                            stepsToFix: [",
							"                                            `This should be a temporary and infrequent issue`,",
							"                                            'Please contact [Postman support](mailto:help@postman.com) if this error is seen repeatedly.'",
							"                                            ]",
							"                                        }",
							"                                    }",
							"                                );",
							"                                var logObject = {",
							"                                    integrationRunId: _.get(pm.globals.get('integrationRun'), 'id', 'Not Found'),",
							"                                    integrationType: pm.variables.get('integration_rule'),",
							"                                    status: pm.environment.get('status'),",
							"                                    totalTime: Date.now() - pm.environment.get('startTime'),",
							"                                    error: {",
							"                                        name: responseData.error,",
							"                                        details: responseData",
							"                                    }",
							"                                };        ",
							"                                pm.integration.log(logObject, licenseKey);",
							"                                break;",
							"",
							"                            case 'fatal_error':",
							"                            case 'internal_error':",
							"                                pm.integration.fail(",
							"                                    'Unknown Error encountered at Slack.',",
							"                                    {",
							"                                        error: {",
							"                                            name: 'slack5XX',",
							"                                            stepsToFix: [",
							"                                            `This should be a temporary and infrequent issue`,",
							"                                            'Please contact [Postman support](mailto:help@postman.com) if this error is seen repeatedly.'",
							"                                            ]",
							"                                        }",
							"                                    }",
							"                                );",
							"                                var logObject = {",
							"                                    integrationRunId: _.get(pm.globals.get('integrationRun'), 'id', 'Not Found'),",
							"                                    integrationType: pm.variables.get('integration_rule'),",
							"                                    status: pm.environment.get('status'),",
							"                                    totalTime: Date.now() - pm.environment.get('startTime'),",
							"                                    error: {",
							"                                        name: responseData.error,",
							"                                        details: responseData",
							"                                    }",
							"                                };        ",
							"                                pm.integration.log(logObject, licenseKey);",
							"                                break;",
							"",
							"                        }",
							"                    }",
							"                }",
							"                else {",
							"                    throw 'unhandled error';",
							"                }",
							"            }",
							"",
							"            postman.setNextRequest(null);",
							"        }",
							"        catch (e) {",
							"            // Expected to come here if there is an unhandled error.",
							"            pm.integration.fail('Unknown error encountered during integration execution.', {",
							"                error: {",
							"                    name: 'unknownError',",
							"                    stepsToFix: 'Please contact [Postman support](mailto:help@postman.com) if this error is seen repeatedly.'",
							"                }",
							"            });",
							"            ",
							"            postman.setEnvironmentVariable(\"status\", \"failure\");",
							"            postman.setEnvironmentVariable(\"errorObject\", JSON.stringify({",
							"                request: pm.info.requestName,",
							"                response: {",
							"                    code: responseCode.code,",
							"                    body: responseBody",
							"                },",
							"                message: ''+e",
							"            }));",
							"            ",
							"            var logObject = {",
							"                integrationRunId: _.get(pm.globals.get('integrationRun'), 'id', 'Not Found'),",
							"                integrationType: pm.variables.get('integration_rule'),",
							"                status: pm.environment.get('status'),",
							"                totalTime: Date.now() - pm.environment.get('startTime'),",
							"                error: JSON.parse(pm.environment.get('errorObject') || '{}'),",
							"                integrationId: pm.globals.get('integrationInstanceId')",
							"            };",
							"",
							"            pm.integration.log(logObject, licenseKey);",
							"            ",
							"            postman.setNextRequest(null);",
							"        }",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"eval(pm.globals.get('pmIntegrationLib'));",
							"try {",
							"    var variables = pm.globals.get('variables'),",
							"        template = pm.globals.get('template'),",
							"        requests = pm.globals.get('requests'),",
							"        job = pm.globals.get('job'),",
							"        collection = pm.globals.get('collection'),",
							"        environment = pm.globals.get('environment'),",
							"        user = pm.globals.get('user'),",
							"        jobtemplate = pm.globals.get('jobTemplate'),",
							"        dashboardHost = `${pm.variables.get('postmanUrl')}/collection`,",
							"        color,",
							"        requestBody,",
							"        failedRequests = [],",
							"        attachments;",
							"    ",
							"    // adding integration variables to globals",
							"    _.each(variables, (value, key) => {",
							"        pm.globals.set(key,value);",
							"    })",
							"    _.get(job.status, ['healthy']) && (color = 'good') || (color = 'danger');",
							"    (_.get(job.status, ['healthy']) && (status = 'Success')) || (_.get(job.status, ['aborted']) &&",
							"        (status = 'Aborted')) || ((!_.isUndefined(_.get(job.results, ['errorCount'])) && _.get(job.results, ['errorCount']) || _.get(job.results, ['errors'])) > 0 && (status = 'Error'))||(status = 'Failed');",
							"    template.indexOf(\"{{collection_name}}\") !== -1 && (template = template.replace(\"{{collection_name}}\", \"<{{collection_url}}|{{collection_name}}>\"));",
							"     // escaping the special characters from collection name and monitor name",
							"    if(jobtemplate) {",
							"        jobtemplate.name = jobtemplate.name.replace('&', '&amp;');",
							"        jobtemplate.name = jobtemplate.name.replace('<', '&lt;');",
							"        jobtemplate.name = jobtemplate.name.replace('>', '&gt;');",
							"    }",
							"    if(collection) {",
							"        collection.name = collection.name.replace('&', '&amp;');",
							"        collection.name = collection.name.replace('<', '&lt;');",
							"        collection.name = collection.name.replace('>', '&gt;');",
							"    }",
							"    template = template.replace(/\\[(\\{\\{name\\}\\})\\]\\((\\{\\{url\\}\\})\\)/, \"<$2|$1>\");",
							"    if (job && job.results) {",
							"        template = template.replace(\"{{requestCount}}\", _.get(job, 'results.requestCount'));",
							"        template.indexOf(\"{{passedTests}}\") !== -1 && (template = template.replace(\"{{passedTests}}\", (!_.isUndefined(_.get(job, 'results.passedTestCount')) ? _.get(job, 'results.passedTestCount') : _.get(job, 'results.passedTests'))));",
							"        template.indexOf(\"{{failedTests}}\") !== -1 && (template = template.replace(\"{{failedTests}}\", (!_.isUndefined(_.get(job, 'results.failedTestCount')) ? _.get(job, 'results.failedTestCount') : _.get(job, 'results.failedTests'))));",
							"        template.indexOf(\"{{errors}}\") !== -1 && (template = template.replace(\"{{errors}}\", (!_.isUndefined(_.get(job, 'results.errorCount')) ? _.get(job, 'results.errorCount') : _.get(job, 'results.errors'))));",
							"        template.indexOf(\"{{url}}\") !== -1 && (template = template.replace(\"{{url}}\", _.get(job, 'url')));",
							"    }",
							"    if (jobtemplate) {",
							"        template = template.replace(\"{{name}}\", jobtemplate.name);",
							"    }",
							"    if (collection) {",
							"        template = template.replace(\"{{collection_name}}\", collection.name);",
							"    }",
							"    // accumulating failed test data from the requests array",
							"    if (_.isArray(requests) && requests.length) {",
							"        _.each(requests, (requestObj) => {",
							"            let region = _.get(requestObj, 'region'),",
							"                requests = _.get(requestObj, 'requests'),",
							"                counter = 1,",
							"                failedRequestsEntry = {",
							"                    pretext: `Failed Tests (${region})`,",
							"                    color: \"danger\",",
							"                    fields: []",
							"                },",
							"                failedTests = [];",
							"                _.each(requests , (request) => {",
							"                    if(request.tests && request.tests.length>0) {",
							"                        _.each(request.tests, (test) => {",
							"                            failedTests.push({",
							"                                title: (counter++) + \". \"+test.name,",
							"                                value: \"Request: \" + request.name,",
							"                                short: false",
							"                            });",
							"                        });",
							"                    }",
							"                });",
							"            if (failedTests.length>0) {",
							"                failedRequestsEntry.fields = failedTests;",
							"                failedRequests.push(failedRequestsEntry);",
							"            }",
							"        }); ",
							"    }",
							"    template.indexOf(\"{{collection_url}}\") !== -1 && (template = template.replace(\"{{collection_url}}\", dashboardHost + \"/\" + _.get(collection, 'owner.id') + \"-\" + _.get(collection, 'id')));",
							"    pm.globals.set(\"message\", template);",
							"    pm.globals.set(\"status\", status);",
							"    pm.globals.set(\"color\", color);",
							"    pm.globals.set(\"totalTests\", (parseInt(!_.isUndefined(job.results.passedTestCount) ? job.results.passedTestCount : job.results.passedTests) + parseInt(!_.isUndefined(job.results.failedTestCount) ? job.results.failedTestCount : job.results.failedTests)));",
							"    attachments = [{",
							"        color: pm.globals.get(\"color\"),",
							"        fields: [{",
							"            \"title\": \"Status\",",
							"            \"value\": pm.globals.get(\"status\"),",
							"            \"short\": true",
							"        }, {",
							"            \"title\": \"Tests Passed\",",
							"            \"value\": (!_.isUndefined(job.results.passedTestCount) ? job.results.passedTestCount : job.results.passedTests) + \" of \" + pm.globals.get(\"totalTests\"),",
							"            \"short\": true",
							"        }, {",
							"            \"title\": \"Total Response Time\",",
							"            \"value\": (!_.isUndefined(job.results.responseLatency) && job.results.responseLatency || job.results.totalLatency) + \" ms\",",
							"            \"short\": true",
							"        }, {",
							"            \"title\": \"Total Requests\",",
							"            \"value\": job.results.requestCount,",
							"            \"short\": true",
							"        }, {",
							"            \"title\": \"Errors\",",
							"            \"value\": !_.isUndefined(job.results.errorCount) ? job.results.errorCount : job.results.errors,",
							"            \"short\": true",
							"        }, {",
							"            \"title\": \"Warnings\",",
							"            \"value\": !_.isUndefined(job.results.warningCount) ? job.results.warningCount : job.results.warnings,",
							"            \"short\": true",
							"        }]",
							"    }];",
							"    _.each(failedRequests, (failedRequest) => {",
							"        attachments.push(failedRequest);",
							"    });",
							"    ",
							"    // url is used to route the request either to slack or postman-echo and it should be treated at the top scope priority.",
							"    if (_.isEmpty(pm.globals.get(\"url\"))) {",
							"        // Suppport connected accounts auth data",
							"        pm.variables.set(\"url\", 'https://slack.com/api/chat.postMessage');",
							"        pm.environment.set('botToken', _.get(variables, 'auth.auth.botToken'));",
							"    } ",
							"    else {",
							"      pm.variables.set(\"url\", pm.globals.get(\"url\"));",
							"    }",
							"",
							"    requestBody = _.assign({",
							"        text: pm.globals.get(\"message\"),",
							"        attachments: attachments,",
							"        username: \"Postman Monitors\",",
							"        icon_url: \"https://static.getpostman.com/assets/logo-glyph.png\"",
							"    }, pm.globals.get(\"channelId\") && {",
							"        channel: pm.globals.get(\"channelId\")",
							"    });",
							"",
							"    if (!pm.globals.get(\"message\")) {",
							"        throw \"something!\";",
							"    }",
							"    pm.globals.set(\"requestBody\", JSON.stringify(requestBody));",
							"    ",
							"    if (_.get(variables, 'options') === 'only_failures' && status === 'Success' && parseInt(_.get(job.results, ['consecutiveCount'])) !== 1) {",
							"        console.log(\"Only failures configured!\");",
							"        pm.variables.set(\"url\", \"https://postman-echo.com/post\");",
							"        pm.globals.set(\"failures\", \"true\");",
							"    }",
							"",
							"    if (_.get(variables, 'options') === 'only_failures' && status !== 'Success' && parseInt(_.get(job.results, ['consecutiveCount'])) > 3) {",
							"        console.log(\"Only failures configured!\");",
							"        pm.variables.set(\"url\", \"https://postman-echo.com/post\");",
							"        pm.globals.set(\"failures\", \"true\");",
							"    }",
							"",
							"    if (_.get(variables, 'options') === 'status_change' && parseInt(_.get(job.results, 'consecutiveCount')) > 1) {",
							"        console.log(\"Only status changes configured!\");",
							"        pm.variables.set(\"url\", \"https://postman-echo.com/post\");",
							"        pm.globals.set(\"failures\", \"true\");",
							"    }",
							"",
							"} ",
							"catch (e) {",
							"",
							"    console.log('err=',e);",
							"    ",
							"    pm.integration.fail('Unknown error encountered during integration execution.', {",
							"        error: {",
							"            name: 'unknownError',",
							"            stepsToFix: 'Please contact [Postman support](mailto:help@postman.com) if this error is seen repeatedly.'",
							"        }",
							"    });",
							"    ",
							"    postman.setEnvironmentVariable(\"status\", \"failure\");",
							"    postman.setEnvironmentVariable(\"errorObject\", JSON.stringify({",
							"        request: pm.info.requestName,",
							"        response: {",
							"            code: responseCode.code,",
							"            body: responseBody",
							"        },",
							"        message: ''+e",
							"    }));",
							"    ",
							"    var logObject = {",
							"        integrationRunId: _.get(pm.globals.get('integrationRun'), 'id', 'Not Found'),",
							"        integrationType: pm.variables.get('integration_rule'),",
							"        status: pm.environment.get('status'),",
							"        totalTime: Date.now() - pm.environment.get('startTime'),",
							"        error: JSON.parse(pm.environment.get('errorObject') || '{}'),",
							"        integrationId: pm.globals.get('integrationInstanceId')",
							"    },",
							"    licenseKey = pm.variables.get('2520660a-b700-11eb-8529-0242ac130003');",
							"",
							"    pm.integration.log(logObject, licenseKey);",
							"    ",
							"    postman.setNextRequest(null);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{botToken}}"
					}
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json; charset=utf-8"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{requestBody}}"
				},
				"url": "{{url}}"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"if (!pm.globals.get('pmIntegrationLib')) {",
					"    pm.sendRequest({",
					"        url: 'https://d3rb19nyyw2q3d.cloudfront.net/pmIntegrationLibrary.js',",
					"        method: 'GET'",
					"    }, (err, res) => {",
					"        if (err || res.code !== 200) {",
					"            pm.globals.set('pmIntegrationLib', pm.variables.get('backup_pmIntegrationLib'));",
					"            return;",
					"        }",
					"        pm.globals.set('pmIntegrationLib', res.text());",
					"    });",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "webhook_url",
			"value": ""
		},
		{
			"key": "integration_rule",
			"value": "monitor_run_slack"
		},
		{
			"key": "2520660a-b700-11eb-8529-0242ac130003",
			"value": "1f55e54bea4ceb659f879b0f683cdb41487fNRAL"
		},
		{
			"key": "backup_pmIntegrationLib",
			"value": "function getIntegrationRunContext(){try{if(!pm.globals.get(\"integrationRun\")){if(!globals.previousRequest)return void console.log(\"Did not find Previous Request!!\");pm.globals.set(\"integrationRun\",_.get(JSON.parse(globals.previousRequest),[\"data\",\"integrationRun\"])),pm.globals.set(\"traceId\",_.get(JSON.parse(globals.previousRequest),[\"data\",\"traceId\"]))}let{id:e,apiVersion:t,accessToken:o,baseUrl:n}=pm.globals.get(\"integrationRun\");return t&&e&&o&&n?(console.log(\"Integration Run Id - \"+e),\"/\"!==n.slice(-1)&&(n+=\"/\"),{id:e,apiVersion:t,accessToken:o,baseUrl:n+=\"integration-runs/\"}):void console.log(\"Did not find valid integration run context: \"+JSON.stringify(pm.globals.get(\"integrationRun\")))}catch(e){return void console.log(\"Error while parsing integrationRunContext: \"+e)}}function statusUpdateAPICallback(e,t){const o=e||200!==t.code?\"Integration Run Status Update API failed. Got code \"+t.code+\" with body: \"+t.text():\"Integration Run status updated.\";console.log(o)}function newRelicAPICallback(e,t){const o=e||202!==t.code?\"New Relic API. Got code \"+t.code+\" with body: \"+t.text():\"Logs sent to New Relic\";console.log(o)}pm.integration={start:function(){console.log(\"Received integration event - Started\");const e=getIntegrationRunContext();e&&pm.sendRequest({url:e.baseUrl+e.id+\"/started\",method:\"POST\",header:{\"x-access-token\":e.accessToken,\"x-srv-trace\":pm.globals.get(\"traceId\")}},statusUpdateAPICallback)},fail:function(e,t){console.log(\"Received integration event - Failed\");const o=getIntegrationRunContext();o&&(pm.globals.get(\"traceId\")&&(t.error||(t.error={}),t.error.traceId=pm.globals.get(\"traceId\")),pm.sendRequest({url:o.baseUrl+o.id+\"/failed\",method:\"POST\",header:{\"x-access-token\":o.accessToken,\"x-srv-trace\":pm.globals.get(\"traceId\")},body:{mode:\"raw\",raw:JSON.stringify({statusMessage:e,extraData:t})}},statusUpdateAPICallback))},success:function(e,t){console.log(\"Received integration event - Succeeded\");const o=getIntegrationRunContext();o&&pm.sendRequest({url:o.baseUrl+o.id+\"/succeeded\",method:\"POST\",header:{\"x-access-token\":o.accessToken,\"x-srv-trace\":pm.globals.get(\"traceId\")},body:{mode:\"raw\",raw:JSON.stringify({statusMessage:e,extraData:t})}},statusUpdateAPICallback)},log:function(e,t){const o=pm.variables.get(\"newrelic_url\")||\"https://log-api.newrelic.com/log/v1\",n=pm.globals.get(\"traceId\");console.log(\"Sending logs to New Relic\"),pm.sendRequest({url:o,method:\"POST\",header:{\"Content-Type\":\"application/json;charset=UTF-8\",\"X-License-Key\":t,traceparent:n},body:{mode:\"raw\",raw:JSON.stringify({timestamp:Date.now(),attributes:{logType:\"integrationCollectionLog\",traceId:n},message:e})}},newRelicAPICallback)}};"
		},
		{
			"key": "monitor_base_url",
			"value": "https://go.postman-stage.co/monitor"
		},
		{
			"key": "postmanUrl",
			"value": "https://go.postman-stage.co"
		}
	]
}